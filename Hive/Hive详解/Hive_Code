


DROP TABLE IF EXISTS employee ;

CREATE TABLE IF NOT EXISTS employee 
(
    id INT COMMENT 'ID'
    ,name STRING COMMENT '姓名'
    ,age INT COMMENT '年龄'
    ,phone STRING COMMENT '电话'
    
)
PARTITIONED BY 
(
    dt STRING COMMENT '日期'
)
LIFECYCLE 31
;

desc employee;


INSERT OVERWRITE TABLE employee PARTITION(dt=20200105) 
VALUES (1, 'July', 18,13176890435), 
(1, 'July', 18,15976890435), 
(1, 'July', 18,15976890435), 
(2, 'Li', 38, 13876891135), 
(3, 'Zhang', 42, 18976890435), 
(4, 'Wang', 25, 15076890435), 
(4, 'Zhao', 25, NULL )
;

DESC employee;

SELECT  *
FROM    employee
WHERE   dt = 20200105
limit 2
;

READ employee;

SELECT  *
FROM    employee
WHERE   dt = max_pt('employee')
;

DROP TABLE if EXISTS employee_Copy;
CREATE TABLE IF NOT EXISTS  employee_Copy AS
SELECT  *
FROM    employee
WHERE   name = 'July'
AND     dt = max_pt('employee')
;


READ employee_Copy;

--简单查询
SELECT  *
FROM    employee
WHERE   dt = max_pt('employee')
;

SELECT name,phone from employee
WHERE dt = max_pt('employee');

SELECT DISTINCT name from employee
WHERE dt = max_pt('employee');

SELECT name as 姓名 from employee
WHERE dt = max_pt('employee');

--排序与分组
SELECT name,age from employee WHERE dt = max_pt('employee')
ORDER by age DESC ;

SELECT name, max(age) as max_age from employee WHERE dt = max_pt('employee')
GROUP BY name
HAVING max_age>19;

--条件查询
SELECT * from employee WHERE dt = max_pt('employee')
and name LIKE 'Ju%';

SELECT * from employee WHERE dt = max_pt('employee')
and phone is not NULL 
and age >18 and age <=38
ORDER BY age ASC 
limit 2;


read employee;

--SQL 日期函数
SELECT name, 
CAST(age as string),
TO_DATE(dt,'yyyymmdd'),
ISDATE(dt,'yyyymmdd'),
getdate(),
DATETRUNC(getdate(), 'yyyy'),
DATEDIFF(GETDATE() ,TO_DATE(dt,'yyyymmdd'),'hh'),
DATEADD(TO_DATE(dt,'yyyymmdd'),1,'mm'),
to_char(DATEADD(TO_DATE(dt,'yyyymmdd'),1,'mm'),'yyyy mm dd'),
DATEPART(DATEADD(TO_DATE(dt,'yyyymmdd'),1,'mm'), 'yyyy'),
DATEPART(DATEADD(TO_DATE(dt,'yyyymmdd'),1,'mm'),'mm'),
WEEKDAY(TO_DATE(dt,'yyyymmdd'))+1
 from employee WHERE dt = max_pt('employee');

 --SQL数字函数

 SELECT ABS(-1.2),
 ASIN(0.5),
 ceil(1.1),
 COALESCE(NULL, 1,2,3,12),
 nvl(NULL,12),
 conv('1100', 2, 10),
 EXP(1),
 floor(1.2),
 ln(10),
 log(2,64),
 POW(2,3),
 RAND(11),
 ROUND(3.14159,3),
 SQRT(9),
 cbrt(27),
 trunc(125.815, 2),
 log2(8),
 log10(100)
 ,sign(-2.5),
 e(),
 pi();

--SQL窗口函数

select MAX(age), MIN(age),AVG(age),
MEDIAN(age) ,STDDEV(age),
COUNT(*) ,sum(age) 
from  employee WHERE dt = max_pt('employee');

select name,phone,age, rank() over(partition by name order by phone) as rank ,
ROW_NUMBER() OVER (PARTITION BY name ORDER BY age DESC) AS nums
from  employee WHERE dt = max_pt('employee');

--SQL字符串函数
select concat('ab', 'c') , length('abc'),md5('abc'),
substr("abc", 2, 1),
 tolower("aBcd"),
  toupper("aBcd"),
  trim('  d  '),
  reverse('abcedfg'),
  concat_ws(':','name','july'),
  replace('ababab','abab','12'),
  split('a-b-c',"-"),
-- part：String 类型，支持HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, 和 USERINFO，不区分大小写，不在此范围抛异常
parse_url('https://ide2-cn-hangzhou.data.aliyun.com/', 'HOST');



--并集
SELECT * FROM VALUES (1, 2), (1, 2), (3, 4) t(a, b) 
  UNION ALL 
  SELECT * FROM VALUES (1, 2), (1, 4) t(a, b);

--带distinct 
  SELECT * FROM VALUES (1, 2), (1, 2), (3, 4) t(a, b) 
  UNION  
  SELECT * FROM VALUES (1, 2), (1, 4) t(a, b);

--交集
   SELECT * FROM VALUES (1, 2), (1, 2), (3, 4), (5, 6) t(a, b) 
  INTERSECT ALL 
  SELECT * FROM VALUES (1, 2), (1, 2), (3, 4), (5, 7) t(a, b);

--补集
  SELECT * FROM VALUES (1, 2), (1, 2), (3, 4), (3, 4), (5, 6), (7, 8) t(a, b) 
  EXCEPT ALL 
  SELECT * FROM VALUES (3, 4), (5, 6), (5, 6), (9, 10) t(a, b);

  --JOIN
 SELECT  *
FROM    (
            SELECT  *
            FROM    employee
            WHERE   dt = max_pt('employee')
        ) a
JOIN    (
            SELECT  *
            FROM    employee_Copy
        ) b
ON      a.name = b.name
;

SELECT  *
FROM    (
            SELECT  *
            FROM    employee
            WHERE   dt = max_pt('employee')
        ) a
left outer JOIN    (
            SELECT  *
            FROM    employee_Copy
        ) b
ON      a.name = b.name
;


SELECT  *
FROM    (
            SELECT  *
            FROM    employee
            WHERE   dt = max_pt('employee')
        ) a
right outer  JOIN    (
            SELECT  *
            FROM    employee_Copy
        ) b
ON      a.name = b.name
;


SELECT  *
FROM    (
            SELECT  *
            FROM    employee
            WHERE   dt = max_pt('employee')
        ) a
full outer JOIN    (
            SELECT  *
            FROM    employee_Copy
        ) b
ON      a.name = b.name
;

SELECT /*+ mapjoin(b) */
 *
FROM    (
            SELECT  *
            FROM    employee
            WHERE   dt = max_pt('employee')
        ) a
JOIN    (
            SELECT  *
            FROM    employee_Copy
        ) b
ON      a.name = b.name
;